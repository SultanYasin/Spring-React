
/* spring.graphql.cors.allow-credentials=true
spring.graphql.cors.allowed-origins=*
spring.graphql.cors.exposed-headers=generatedToken, Authorization


import LocalStorage from "./components/utility/LocalStorage";
import { Routes, Route } from "react-router-dom";
import Appbar from "./components/AppBar";
import Todo from "./components/Todo";
import Home from "./Home";
<Routes>
      <Route path="/src/Home.js" element={<Home />} />
      <Route path="/src/components/AppBar.js" element={<Appbar />} />
      <Route path="/src/components/Todo.js" element={<Todo />} /> 
    </Routes>*/

/*     const token = res.data.token;
    axios.defaults.headers.common["Authorization"] = token;
    
    let user = JSON.parse(sessionStorage.getItem('data'));
const token = user.data.id;

const api = `your api here`
axios.get(api, { headers: {"Authorization" : `Bearer ${token}`} })
        .then(res => {
            console.log(res.data);
   

  const getProtectedInfo = async () => {
    console.log("Getting protected info ")

    try {
         
         axios.get("http://localhost:8080/info", {
      headers: {
        "Content-Type" : "application/json",
        "Authorization" : `Bearer ${Token}`}
      }).then(res => console.log(res))
    } catch (error) {
      
    }
 
  }
 */

/* 
  useEffect(() => {
    // no token ? generate : keep the existing one
    const getdata = async () => {
      var myHeaders = new Headers();
      myHeaders.append("username", "ss");
      myHeaders.append("password", "ss");

      var requestOptions = {
        headers: myHeaders,
      };

      

      const res = await fetch("http://localhost:8080/login",  {
        headers: {
          "username":"ss",
          "password":"ss"
        },
      }).then((res) => Promise.all([res.json(), res.headers]))
      .then(([body, headers]) => {
        console.log('here...')
        const jwtToken = headers.get("Authorization");

        setJwtToken(jwtToken);
        console.log("token is : " + jwtToken);
        console.log(body);
      }); 
      console.log(res.headers);
    };
    if (!jwtToken) {
      try {
        getdata();
                var myHeaders = new Headers();
        myHeaders.append("username", "ss");
        myHeaders.append("password", "ss");

        fetch("http://localhost:8080/login", {
          headers: myHeaders,
          method: "post",
        })
          .then((res) => Promise.all([res.json(), res.headers]))
          .then(([body, headers]) => {
            console.log('here...')
            const jwtToken = headers.get("Authorization");

            setJwtToken(jwtToken);
            console.log("token is : " + jwtToken);
            console.log(body);
          }); 
      } catch (error) {
        console.log(error, "errrorrrrrr");
      }
    }
  }, []);


  useEffect(() => {
    const data = {username: "ss" , password: "ss"}
    fetch("http://localhost:8080/login" , {
      headers: {"Content-Type": "applciation/json"},
      method:"POST",
      body:JSON.stringify(data)
    }).then((res) => Promise.all([res.json(), res.headers]))
    .then(([body, headers]) => {
     
      const jwtToken = headers.get("x-generatedToken");

      setJwtToken(jwtToken);
      console.log("token is : " + jwtToken);
      console.log(body);
    }); 
  

  },[] )
  */
